" Make Vim more useful
set nocompatible

" NeoBundle auto-installation and setup {{{
    " Auto installing NeoBundle
    let iCanHazNeoBundle=1
    let neobundle_readme=expand($HOME.'/.vim/bundle/neobundle.vim/README.md')
    if !filereadable(neobundle_readme)
        echo "Installing NeoBundle.."
        echo ""
        silent !mkdir -p $HOME/.vim/bundle
        silent !git clone https://github.com/Shougo/neobundle.vim $HOME/.vim/bundle/neobundle.vim
        let iCanHazNeoBundle=0
    endif

    " Call NeoBundle
    if has('vim_starting')
        set rtp+=$HOME/.vim/bundle/neobundle.vim/
    endif

    call neobundle#begin(expand('~/.vim/bundle/'))
    NeoBundleFetch 'Shougo/neobundle.vim'

    " Bundles
        " Libs
            NeoBundle 'L9'
            NeoBundle "MarcWeber/vim-addon-mw-utils"
            NeoBundle "tomtom/tlib_vim"
            " Vimproc to asynchronously run commands (NeoBundle, Unite)
            NeoBundle 'Shougo/vimproc', {
                  \ 'build' : {
                  \     'windows' : 'make -f make_mingw32.mak',
                  \     'cygwin' : 'make -f make_cygwin.mak',
                  \     'mac' : 'make -f make_mac.mak',
                  \     'unix' : 'make -f make_unix.mak',
                  \    },
                  \ }
        " Interface
            " Unite. The interface to rule almost everything
            NeoBundle 'Shougo/unite.vim'
                " Unite sources
                NeoBundleLazy 'Shougo/unite-outline', {'autoload':{'unite_sources':'outline'}}
                NeoBundleLazy 'tsukkee/unite-help', {'autoload':{'unite_sources':'help'}}
                NeoBundleLazy 'ujihisa/unite-colorscheme', {'autoload':{'unite_sources': 'colorscheme'}}
                NeoBundleLazy 'ujihisa/unite-locate', {'autoload':{'unite_sources':'locate'}}
                NeoBundleLazy 'thinca/vim-unite-history', { 'autoload' : { 'unite_sources' : ['history/command', 'history/search']}}
                NeoBundleLazy 'osyo-manga/unite-filetype', { 'autoload' : {'unite_sources' : 'filetype', }}
                NeoBundleLazy 'osyo-manga/unite-quickfix', {'autoload':{'unite_sources': ['quickfix', 'location_list']}}
                NeoBundleLazy 'osyo-manga/unite-fold', {'autoload':{'unite_sources':'fold'}}
                NeoBundleLazy 'tacroe/unite-mark', {'autoload':{'unite_sources':'mark'}}
                " File explorer (needed where ranger is not available)
                NeoBundleLazy 'Shougo/vimfiler', {'autoload' : { 'commands' : ['VimFiler']}}
                " Junk files
                NeoBundleLazy 'Shougo/junkfile.vim', {'autoload':{'commands':'JunkfileOpen', 'unite_sources':['junkfile','junkfile/new']}}
            " A better looking status line
            NeoBundle 'bling/vim-airline'
            " Zooms a window
            NeoBundleLazy 'vim-scripts/zoomwintab.vim', {'autoload' :{'commands' : 'ZoomWinTabToggle'}}
            " Easily window resizing
            NeoBundle 'jimsei/winresizer'
            NeoBundle 'scrooloose/nerdtree'
            " Fily FuzzySearch
            NeoBundle 'wincent/Command-T'
        " Colorschemes
            " Dark themes
                NeoBundle 'joedicastro/vim-molokai256'
                NeoBundle 'tomasr/molokai'
                NeoBundle 'sjl/badwolf'
                NeoBundle 'nielsmadan/harlequin'
                NeoBundle 'jpo/vim-railscasts-theme'
                NeoBundle '29decibel/codeschool-vim-theme'
                NeoBundle 'vividchalk.vim'
            " Light themes
                NeoBundle 'vim-scripts/summerfruit256.vim'
                NeoBundle 'joedicastro/vim-github256'
        " Git
            " Admin Git
            NeoBundle 'tpope/vim-fugitive'
            " Show git repository changes in the current file [DISABLED]
            "NeoBundle 'airblade/vim-gitgutter'
            " Git viewer
            NeoBundleLazy 'gregsexton/gitv', {'depends':['tpope/vim-fugitive'], 'autoload':{'commands':'Gitv'}}
            " Browse GitHub events in Vim
            NeoBundle 'joedicastro/vim-github-dashboard'
        " Editing
            " Snippets
            NeoBundle "SirVer/ultisnips"
            " To surround vim objects with a pair of identical chars
            NeoBundle 'tpope/vim-surround'
            NeoBundle 'scrooloose/nerdcommenter'
            NeoBundle "bronson/vim-trailing-whitespace"
            " Syntax checking
            NeoBundle "scrooloose/syntastic"
            NeoBundle "nathanaelkane/vim-indent-guides"
            NeoBundle 'AndrewRadev/switch.vim'
            NeoBundle 'Lokaltog/vim-easymotion'
            NeoBundle 'chase/vim-ansible-yaml'
            " Autocompletion of (, [, {, ', ", ... [DISABLED]
            NeoBundle 'Raimondi/delimitMate'
            NeoBundle 'terryma/vim-multiple-cursors'
            "NeoBundle 'Townk/vim-autoclose'
            NeoBundle 'Valloric/YouCompleteMe'
            NeoBundle 'kana/vim-textobj-user'
            NeoBundle 'nelstrom/vim-textobj-rubyblock'
            NeoBundle 'godlygeek/tabular'
            NeoBundle 'mattn/emmet-vim'
            NeoBundle 'tpope/vim-dispatch'
        " Ruby
            NeoBundle 'vim-ruby/vim-ruby'
            NeoBundle 'tpope/vim-rails.git'
            NeoBundle 'tpope/vim-bundler'
            NeoBundle 'tpope/vim-rake'
            NeoBundle 'thoughtbot/vim-rspec'
            NeoBundle 'stefanoverna/vim-i18n'
        " PHP
            NeoBundle 'php.vim'
        " Clojure
            NeoBundle 'tpope/vim-classpath'
            NeoBundle 'paredit.vim'
            NeoBundle 'amdt/vim-niji'
            NeoBundle 'tpope/vim-fireplace'
            NeoBundle 'tpope/vim-leiningen'
            NeoBundle 'guns/vim-clojure-static'
            NeoBundle 'guns/vim-clojure-highlight'
        " Syntax support
            NeoBundle 'ap/vim-css-color'
            NeoBundle 'othree/html5.vim'
            NeoBundle 'vim-ruby/vim-ruby'
            NeoBundle 'tsaleh/vim-tmux'
            NeoBundle 'Puppet-Syntax-Highlighting'
            NeoBundle 'JSON.vim'
            NeoBundle 'tpope/vim-cucumber'
            NeoBundle 'tpope/vim-haml'
            NeoBundle 'tpope/vim-markdown'
            NeoBundle 'kchmck/vim-coffee-script'
            NeoBundle 'vitaly/vim-syntastic-coffee'
            NeoBundle 'vim-scripts/jade.vim'
            NeoBundle 'wavded/vim-stylus'
            NeoBundle 'slim-template/vim-slim'
            NeoBundle 'elixir-lang/vim-elixir'
            NeoBundle 'Keithbsmiley/rspec.vim'
        " Support
            " extend repetitions by the 'dot' key
            NeoBundle 'tpope/vim-repeat'
            " Run things asynchronously
            NeoBundle 'tpope/vim-dispatch'
            " browse the vim undo tree
            NeoBundleLazy 'sjl/gundo.vim', { 'autoload' : {'commands': 'GundoToggle'}}
    " First-time plugins installation
    if iCanHazNeoBundle == 0
        echo "Installing Bundles, please ignore key map error messages"
        echo ""
        :NeoBundleInstall
    endif
    NeoBundleCheck
    call neobundle#end()
" }}}

filetype plugin indent on      " Indent and plugins by filetype
runtime macros/matchit.vim

" VIM Setup {{{ ===============================================================
    let mapleader=','
    let maplocalleader= ' '
    "Basic
        set ttimeoutlen=0       " toggle between modes almost instantly
        "set autoread            " automatically read file that has been changed on disk and doesn't have changes in vim
        set autowriteall        " Automatically save before commands like :next and :make
        set hidden              " enable multiple modified buffers
        set history=1000        " Store a lots of history commands
    " Backup
        set nobackup            " Don't create backups
        set noswapfile          " Don't create swap files
    " Encoding
        set encoding=utf-8
        set termencoding=utf-8
        set fileencodings=utf8,cp1251
    " Interface
        set title               " Set title of the window to filename [+=-] (path) - VIM
        set showcmd             " Show (partial) command in status line.
        set scrolloff=5         " Minimal number of lines to keep above and below the cursor
        set ruler               " line and column number of the cursor position
        set laststatus=2        " always show the status line
        "set cursorline          " Highlight the screen line of the cursor
        set splitbelow          " Splitting a window will put the new window below the current one
        set splitright          " Splitting a window will put the new window right of the current one
        set backspace=indent,eol,start
    " Wildmenu
        set wildmenu                        " Command line autocompletion
        set wildmode=list:longest,full      " Shows all the options
        set wildignore+=*.sw?                            " Vim swap files
        set wildignore+=*.bak,*.?~,*.??~,*.???~,*.~      " Backup files
        set wildignore+=*.luac                           " Lua byte code
        set wildignore+=*.jar                            " java archives
        set wildignore+=*.pyc                            " Python byte code
        set wildignore+=*.stats                          " Pylint stats
    " Search
        set incsearch           " While typing a search command, show pattern matches as it is typed
        set hlsearch            " When there is a previous search pattern, highlight all its matches
        set ignorecase          " Ignore case in search patterns
        set smartcase           " Override the 'ignorecase' if the search pattern contains upper case characters
        set gdefault            " All matches in a line are substituted instead of one
    " Editor
        autocmd BufRead,BufNewFile *.md setlocal spell
        hi SpellErrors guibg=red guifg=black ctermbg=red ctermfg=black
        "set showtabline=2       " Always show tabs
        set list                " Display invisible characters
        set listchars=tab:▷⋅,trail:·
        set number              " Set line numbers
        set showmatch           " Show matching brackets.
        set nowrap              " Do not wrap words (view)
    " Tabs, Spaces
        set expandtab           " Use spaces instead of tab
        set shiftwidth=4        " Number of spaces to use for each step of (auto)indent
        set tabstop=4           " Number of spaces that a tab counts for
        set softtabstop=4       " Number of spaces that a tab counts for while performing editing operations
        set autoindent          " Copy indent from current line when starting a new line
        set smartindent         " Do smart indenting when starting a new line
        " File specific
            autocmd FileType ruby,coffee,haml,sass,yaml,scss setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
    " GUI
        set go-=T               " hide the toolbar
        set go-=m               " hide the menu
        " The next two lines are quite tricky, but in Gvim, if you don't do this, if you
        " only hide all the scrollbars, the vertical scrollbar is showed anyway
        set go+=rRlLbh                  " show all the scrollbars
        set go-=rRlLbh                  " hide all the scrollbars
        set ttyfast                     " better screen redraw
        set lazyredraw                  " only redraws if it is needed
    " Colorscheme
        syntax enable
        set t_Co=256            " Number of colors
        set background=dark
        if has("gui_running")
            colorscheme railscasts
        else
            colorscheme molokai256
            let g:indent_guides_auto_colors = 0
            autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=darkgrey ctermbg=black
            autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=darkgrey ctermbg=black
        endif
        set guifont=Ubuntu\ Mono\ 12
        let &colorcolumn=join(range(120,999),",")
    " Resize the divisions if the Vim window size changes
        au VimResized * exe 'normal! \<c-w>='
    " Enable omni completion.
        " Ruby completion
            autocmd FileType ruby let g:rubycomplete_buffer_loading = 1
            autocmd FileType ruby let g:rubycomplete_rails = 1
            autocmd FileType ruby let g:rubycomplete_classes_in_global = 1
            autocmd FileType ruby let g:rubycomplete_include_object = 1
            autocmd FileType ruby let g:rubycomplete_include_objectspace = 1
        autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType ruby set omnifunc=rubycomplete#Complete
        autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    " ClojureScript support
        autocmd BufRead,BufNewFile *.cljs setlocal filetype=clojure
        " ClojureScript repl
        command! Wiggie :Piggieback (weasel.repl.websocket/repl-env :ip "0.0.0.0" :port 9001)
" }}}

" Scortcuts {{{ ===============================================================
    " Basic {{{
        " Clear the search highlight in Normal mode
        nnoremap <silent> <Esc><Esc> :nohlsearch<CR><Esc>
        " FixWhitespaces
        map <F5> :FixWhitespace<CR>
    " }}}
    " Quick exiting without save {{{
        nnoremap <Leader>`` :qa!<CR>
    " }}}
    " Windows {{{
        " Fast windows moves
        nmap <C-h> <C-W>h
        nmap <C-j> <C-W>j
        nmap <C-k> <C-W>k
        nmap <C-l> <C-W>l
        " New windows
        nnoremap <Leader>v <C-w>v
        nnoremap <Leader>h <C-w>s
        " Create a new window relative to the current one
        nmap <Leader><left>  :leftabove  vnew<CR>
        nmap <Leader><right> :rightbelow vnew<CR>
        nmap <Leader><up>    :leftabove  new<CR>
        nmap <Leader><down>  :rightbelow new<CR>
        " Fast window & buffer close and kill
        nnoremap <Leader>k <C-w>c
        nnoremap <silent><Leader>K :bd<CR>
        " Fast switch between two last windows
        nnoremap <leader><leader> <c-^>
    " }}}
    " Cut/Paste {{{
        " to/from the clipboard
        map <Leader>y "*y
        map <Leader>p "+p
        " toggle paste mode
        map <Leader>P :set invpaste<CR>
    " }}}
    " Spelling {{{
        " turn on the spell checking and set the Spanish language
        nmap <Leader>ss :setlocal spell spelllang=es<CR>
        " turn on the spell checking and set the English language
        nmap <Leader>se :setlocal spell spelllang=en<CR>
        " turn off the spell checking
        nmap <Leader>so :setlocal nospell <CR>
        " jump to the next bad spell word
        nmap <Leader>sn ]s
        " suggest words
        nmap <Leader>sp z=
        " jump to the next bad spell word and suggests a correct one
        nmap <Leader>sc ]sz=
        " add word to the dictionary
        nmap <Leader>sa zg
    " }}}
    " Search {{{
        " Search matches are always in center
        nmap n nzz
        nmap N Nzz
        nmap * *zz
        nmap # #zz
        nmap g* g*zz
        nmap g# g#zz
    " }}}
    " Tags {{{
        " Reload tags
        map <Leader>rt :!ctags --fields=+l --languages=-javascript --exclude=.git --exclude='*.log' -R * `bundle show --paths`<CR><CR>
    " }}}
    " Rails {{{
        map <leader>gr :topleft :split config/routes.rb<cr>
        map <leader>gg :topleft :split Gemfile<cr>
        map <leader>ge :topleft :vsplit config/locales/en.yml<cr>
    " }}}
" }}}

" Plugins {{{=========================================================
    " Toggle line numbers {{{
        nnoremap <silent><Leader>l :call ToggleRelativeAbsoluteNumber()<CR>
        function! ToggleRelativeAbsoluteNumber()
          if !&number && !&relativenumber
              set number
              set norelativenumber
          elseif &number && !&relativenumber
              set nonumber
              set relativenumber
          elseif !&number && &relativenumber
              set number
              set relativenumber
          elseif &number && &relativenumber
              set nonumber
              set norelativenumber
          endif
        endfunction
    " }}}
    " NerdTree {{{
        " Toggle NERDTree
        map <C-x> :NERDTreeToggle<CR>
        let NERDTreeShowBookmarks=1
        let NERDTreeChDirMode=2
        let NERDTreeQuitOnOpen=1
        let NERDTreeShowHidden=1
        let NERDTreeKeepTreeInNewTab=0
        let NERDTreeMinimalUI=1
        let NERDTreeDirArrows=1
        let NERDTreeIgnore=['\.idea$', '\.git$', 'TAGS']
        let g:NERDTreeWinPos = "right""
    " }}}
    " Run RSPec tests {{{
        if has("gui_running")
            let g:rspec_command = "!rspec --no-color {spec}"
        else
            let g:rspec_command = "!rspec {spec}"
        endif
        map <Leader>tf :call RunCurrentSpecFile()<CR>
        map <Leader>tn :call RunNearestSpec()<CR>
        map <Leader>tl :call RunLastSpec()<CR>
        map <Leader>ta :call RunAllSpecs()<CR>
    " }}}
    " Nerd Comment {{{
        nmap <leader>/ :call NERDComment(0, "invert")<cr>
        vmap <leader>/ :call NERDComment(0, "invert")<cr>
    " }}}
    " Rails/i18n translate {{{
        vmap <Leader>z :call I18nTranslateString()<CR>
    " }}}
    " Swich {{{
        map <Leader>w :Switch<CR>
        autocmd FileType haml let b:switch_definitions =
            \ [
            \   g:switch_builtins.ruby_hash_style,
            \   g:switch_builtins.ruby_string,
            \   g:switch_builtins.true_false,
            \   g:switch_builtins.true_false,
            \ ]
    " }}}
    " Airline {{{
        let g:airline_theme='powerlineish'
        let g:airline_enable_branch=1
        let g:airline_detect_whitespace = 1
        let g:airline#extensions#hunks#non_zero_only = 1
    " }}}
    " Synastic {{{
        let g:syntastic_enable_signs=1
        let g:syntastic_auto_loc_list=2
        let g:syntastic_check_on_wq=0
        let g:syntastic_check_on_open=1
        let g:syntastic_error_symbol='✗'
        let g:syntastic_warning_symbol='⚠'
        let g:syntastic_style_error_symbol  = '⚡'
        let g:syntastic_style_warning_symbol  = '⚡'
    " }}}
    " YouCompleteMe {{{
        let g:ycm_complete_in_comments = 1
        let g:ycm_collect_identifiers_from_tags_files = 1
        "let g:ycm_autoclose_preview_window_after_completion = 1
        "let g:ycm_autoclose_preview_window_after_insertion = 1
        "let g:ycm_key_list_select_completion = ['<Down>']
        "let g:ycm_key_list_previous_completion = ['<Up>']
        let g:ycm_key_invoke_completion = '<C-Space>'
        let g:ycm_cache_omnifunc = 1
    " }}}
    " Indent-guides {{{
        let g:indent_guides_start_level = 2
        let g:indent_guides_enable_on_vim_startup = 1
        let g:indent_guides_guide_size = 1
        let g:indent_guides_color_change_percent = 5
    " }}}
    " ColorV {{{
        let g:colorv_cache_file=$HOME.'/.vim/tmp/vim_colorv_cache'
        let g:colorv_cache_fav=$HOME.'/.vim/tmp/vim_colorv_cache_fav'
    " }}}
    " Delimitmate {{{
        let delimitMate_expand_space = 1
    " }}}
    " Tabularize {{{
        nmap <Leader>a= :Tabularize /=<CR>
        vmap <Leader>a= :Tabularize /=<CR>
        nmap <Leader>a: :Tabularize /:\zs<CR>
        vmap <Leader>a: :Tabularize /:\zs<CR>
    " }}}
    " Command-T {{{
        map <leader>gr :topleft :split config/routes.rb<cr>
        map <leader>gg :topleft :split Gemfile<cr>
        map <leader>ge :topleft :vsplit config/locales/en.yml<cr>
        map <leader>gv :CommandTFlush<cr>\|:CommandT app/views<cr>
        map <leader>ga :CommandTFlush<cr>\|:CommandT app/assets<cr>
        map <leader>gi :CommandTFlush<cr>\|:CommandT app/assets/images<cr>
        map <leader>gj :CommandTFlush<cr>\|:CommandT app/assets/javascripts<cr>
        map <leader>gs :CommandTFlush<cr>\|:CommandT app/assets/stylesheets<cr>
        map <leader>gc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
        map <leader>gm :CommandTFlush<cr>\|:CommandT app/models<cr>
        map <leader>gh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
        map <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
        map <leader>gt :CommandTFlush<cr>\|:CommandT spec<cr>
        map <leader>gf :CommandTFlush<cr>\|:CommandT<cr>
    " }}}
    " Fugitive {{{
        nnoremap <Leader>vn :Unite output:echo\ system("git\ init")<CR>
        nnoremap <Leader>vs :Gstatus<CR>
        nnoremap <Leader>vw :Gwrite<CR>
        nnoremap <Leader>vo :Gread<CR>
        nnoremap <Leader>vR :Gremove<CR>
        nnoremap <Leader>vm :Gmove<Space>
        nnoremap <Leader>vc :Gcommit<CR>
        nnoremap <Leader>vd :Gdiff<CR>
        nnoremap <Leader>vb :Gblame<CR>
        nnoremap <Leader>vB :Gbrowse<CR>
        nnoremap <Leader>vp :Git! push<CR>
        nnoremap <Leader>vP :Git! pull<CR>
        nnoremap <Leader>vi :Git!<Space>
        nnoremap <Leader>ve :Gedit<CR>
        nnoremap <Leader>vE :Gedit<Space>
        nnoremap <Leader>vl :exe "silent Glog <Bar> Unite -no-quit quickfix"<CR>:redraw!<CR>
        nnoremap <Leader>vL :exe "silent Glog -- <Bar> Unite -no-quit quickfix"<CR>:redraw!<CR>
    " }}}
    " Gitv {{{
        nnoremap <silent> <leader>vv :Gitv --all<CR>
        nnoremap <silent> <leader>vV :Gitv! --all<CR>
        vnoremap <silent> <leader>vV :Gitv! --all<CR>

        let g:Gitv_OpenHorizontal = 'auto'
        let g:Gitv_WipeAllOnClose = 1
        let g:Gitv_DoNotMapCtrlKey = 1

        autocmd FileType git set nofoldenable
    " }}}
    " Gundo {{{
        nnoremap <Leader>u :GundoToggle<CR>
        let g:gundo_preview_bottom = 1
    " }}}
    " Zoomwintab {{{
        nmap <Leader>z :ZoomWinTabToggle<CR>
    " }}}
    " Unite {{{
        " buffer search
        nnoremap <silent><Leader>f :Unite -silent -no-split -start-insert -auto-preview line<CR>
        nnoremap <silent>[menu]8 :UniteWithCursorWord -silent -no-split -auto-preview line<CR>
        " yankring
        nnoremap <silent><Leader>i :Unite -silent history/yank<CR>
        " grep
        nnoremap <silent><Leader>a :Unite -silent -no-quit grep<CR>
        " help
        nnoremap <silent> g<C-h> :UniteWithCursorWord -silent help<CR>
        " tasks
        nnoremap <silent><Leader>; :Unite -silent -toggle
                    \ grep:%::FIXME\|TODO\|NOTE\|XXX\|COMBAK\|@todo<CR>
        " outlines (also ctags)
        nnoremap <silent><Leader>t :Unite -silent -vertical -winwidth=40
                    \ -direction=topleft -toggle outline<CR>
        " junk files
          nnoremap <silent><Leader>d :Unite -silent junkfile/new junkfile<CR>

        " menus {{{
        let g:unite_source_menu_menus = {}

        " menu prefix key (for all Unite menus) {{{
            nnoremap [menu] <Nop>
            nmap <LocalLeader> [menu]
        " }}}

        " menus menu
        nnoremap <silent>[menu]u :Unite -silent -winheight=20 -start-insert menu<CR>

        " files and dirs menu {{{
        let g:unite_source_menu_menus.files = {
            \ 'description' : '          files & dirs
                \                                           [space]o',
            \}
        let g:unite_source_menu_menus.files.command_candidates = [
            \['▷ open file                                                   ,gf',
                \'CommandT'],
            \['▷ save as root                                               ',
                \'exe "write !sudo tee % >/dev/null"'],
            \['▷ open nerdtree                                               ,X',
                \'NERDTreeToggle'],
            \]
        nnoremap <silent>[menu]o :Unite -silent -winheight=9 -start-insert menu:files<CR>
        " }}}

        " file searching menu {{{
        let g:unite_source_menu_menus.grep = {
            \ 'description' : '           search files
                \                                           [space]a',
            \}
        let g:unite_source_menu_menus.grep.command_candidates = [
            \['▷ grep (ag → ack → grep)                                      ,a',
                \'Unite -no-quit grep'],
            \['▷ find',
                \'Unite find'],
            \['▷ locate',
                \'Unite -start-insert locate']
            \]
        nnoremap <silent>[menu]a :Unite -silent -winheight=9 -start-insert menu:grep<CR>
        " }}}

        " buffers, tabs & windows menu {{{
        let g:unite_source_menu_menus.navigation = {
            \ 'description' : '     navigate by buffers, tabs & windows
                \                    [space]b',
            \}
        let g:unite_source_menu_menus.navigation.command_candidates = [
            \['▷ buffers                                                     ',
                \'Unite buffer -start-insert'],
            \['▷ tabs                                                        ',
                \'Unite tab -start-insert'],
            \['▷ windows',
                \'Unite window -start-insert'],
            \['▷ quickfix',
                \'Unite quickfix'],
            \['▷ resize windows                                              ',
                \'WinResizerStartResize'],
            \['▷ new vertical window                                         ,v',
                \'vsplit'],
            \['▷ new horizontal window                                       ,h',
                \'split'],
            \['▷ close current window                                        ,k',
                \'close'],
            \['▷ zoom                                                        ,z',
                \'ZoomWinTabToggle'],
            \]
        nnoremap <silent>[menu]b :Unite -silent -winheight=11 -start-insert menu:navigation<CR>
        " }}}

        " buffer internal searching menu {{{
        let g:unite_source_menu_menus.searching = {
            \ 'description' : '      searchs inside the current buffer
                \                      [space]f',
            \}
        let g:unite_source_menu_menus.searching.command_candidates = [
            \['▷ search line                                                 ,f',
                \'Unite -silent -no-split -start-insert -auto-preview line'],
            \['▷ search word under the cursor                                [space]8',
                \'UniteWithCursorWord -no-split -auto-preview line'],
            \['▷ search outlines & tags      (ctags)                         ,t',
                \'Unite -vertical -winwidth=40 -direction=topleft -toggle outline'],
            \['▷ search changes',
                \'Unite change'],
            \['▷ search jumps',
                \'Unite jump']
            \]
        nnoremap <silent>[menu]f :Unite -silent -winheight=11 -start-insert menu:searching<CR>
        " }}}

        " yanks, registers & history menu {{{
        let g:unite_source_menu_menus.registers = {
            \ 'description' : '      yanks, registers & history
                \                             [space]i',
            \}
        let g:unite_source_menu_menus.registers.command_candidates = [
            \['▷ yanks                                                       ,i',
                \'Unite history/yank'],
            \['▷ commands       (history)                                    q:',
                \'Unite history/command'],
            \['▷ searches       (history)                                    q/',
                \'Unite history/search'],
            \['▷ registers',
                \'Unite register'],
            \['▷ messages',
                \'Unite output:messages'],
            \['▷ undo tree      (gundo)                                      ,u',
                \'GundoToggle'],
            \]
        nnoremap <silent>[menu]i :Unite -silent -winheight=11 -start-insert menu:registers<CR>
        " }}}

        " spelling menu {{{
        let g:unite_source_menu_menus.spelling = {
            \ 'description' : '       spell checking
                \                                         [space]s',
            \}
        let g:unite_source_menu_menus.spelling.command_candidates = [
            \['▷ spell checking in English                                   ,se',
                \'setlocal spell spelllang=en'],
            \['▷ turn off spell checking                                     ,so',
                \'setlocal nospell'],
            \['▷ jumps to next bad spell word and show suggestions           ,sc',
                \'normal ,sc'],
            \['▷ jumps to next bad spell word                                ,sn',
                \'normal ,sn'],
            \['▷ suggestions                                                 ,sp',
                \'normal ,sp'],
            \['▷ add word to dictionary                                      ,sa',
                \'normal ,sa'],
            \]
        nnoremap <silent>[menu]s :Unite -silent -winheight=11 -start-insert menu:spelling<CR>
        " }}}

        " text edition menu {{{
        let g:unite_source_menu_menus.text = {
            \ 'description' : '           text edition
                \                                           [space]e',
            \}
        let g:unite_source_menu_menus.text.command_candidates = [
            \['▷ copy to the clipboard                                       ,y',
                \'normal ,y'],
            \['▷ paste from the clipboard                                    ,p',
                \'normal ,p'],
            \['▷ toggle paste mode                                           ,P',
                \'normal ,P'],
            \['▷ remove trailing whitespaces                                 <F5>',
                \'FixWhitespace'],
            \['▷ show current char info                                      ga',
                \'normal ga'],
            \]
        nnoremap <silent>[menu]e :Unite -silent -winheight=11 -start-insert menu:text <CR>
        " }}}

        " neobundle menu {{{
        let g:unite_source_menu_menus.neobundle = {
            \ 'description' : '      plugins administration with neobundle
                \                  [space]n',
            \}
        let g:unite_source_menu_menus.neobundle.command_candidates = [
            \['▷ neobundle',
                \'Unite neobundle'],
            \['▷ neobundle log',
                \'Unite neobundle/log'],
            \['▷ neobundle lazy',
                \'Unite neobundle/lazy'],
            \['▷ neobundle update',
                \'Unite neobundle/update'],
            \['▷ neobundle search',
                \'Unite neobundle/search'],
            \['▷ neobundle install',
                \'Unite neobundle/install'],
            \['▷ neobundle check',
                \'Unite -no-empty output:NeoBundleCheck'],
            \['▷ neobundle docs',
                \'Unite output:NeoBundleDocs'],
            \['▷ neobundle clean',
                \'NeoBundleClean'],
            \['▷ neobundle list',
                \'Unite output:NeoBundleList'],
            \['▷ neobundle direct edit',
                \'NeoBundleDirectEdit'],
            \]
        nnoremap <silent>[menu]n :Unite -silent -start-insert menu:neobundle<CR>
        " }}}

        " git menu {{{
        let g:unite_source_menu_menus.git = {
            \ 'description' : '            admin git repositories
                \                                 [space]g',
            \}
        let g:unite_source_menu_menus.git.command_candidates = [
            \['▷ git status             (fugitive)                           ,vs',
                \'Gstatus'],
            \['▷ git diff               (fugitive)                           ,vd',
                \'Gdiff'],
            \['▷ git commit             (fugitive)                           ,vc',
                \'Gcommit'],
            \['▷ git log                (fugitive)                           ,vl',
                \'exe "silent Glog | Unite -no-quit quickfix"'],
            \['▷ git blame              (fugitive)                           ,vb',
                \'Gblame'],
            \['▷ git add/stage          (fugitive)                           ,vw',
                \'Gwrite'],
            \['▷ git checkout           (fugitive)                           ,vo',
                \'Gread'],
            \['▷ git rm                 (fugitive)                           ,vR',
                \'Gremove'],
            \['▷ git mv                 (fugitive)                           ,vm',
                \'exe "Gmove " input("destino: ")'],
            \['▷ git push               (fugitive, buffer output)            ,vp',
                \'Git! push'],
            \['▷ git pull               (fugitive, buffer output)            ,vP',
                \'Git! pull'],
            \['▷ git grep               (fugitive)                           ,vg',
                \'exe "silent Ggrep -i ".input("Pattern: ") | Unite -no-quit quickfix'],
            \['▷ git grep - messages    (fugitive)                           ,vgm',
                \'exe "silent Glog --grep=".input("Pattern: ")." | Unite -no-quit quickfix"'],
            \['▷ git grep - text        (fugitive)                           ,vgt',
                \'exe "silent Glog -S".input("Pattern: ")." | Unite -no-quit quickfix"'],
            \['▷ git init                                                    ,vn',
                \'Unite output:echo\ system("git\ init")'],
            \['▷ git cd                 (fugitive)',
                \'Gcd'],
            \['▷ git lcd                (fugitive)',
                \'Glcd'],
            \]
        nnoremap <silent>[menu]g :Unite -silent -winheight=20 -start-insert menu:git<CR>
        " }}}

        " code menu {{{
        let g:unite_source_menu_menus.code = {
            \ 'description' : '           code tools
                \                                             [space]p',
            \}
        let g:unite_source_menu_menus.code.command_candidates = [
            \['▷ syntastic toggle                           (syntastic)',
                \'SyntasticToggleMode'],
            \]
        nnoremap <silent>[menu]p :Unite -silent -winheight=5 menu:code<CR>
        " }}}

        " vim menu {{{
        let g:unite_source_menu_menus.vim = {
            \ 'description' : '            vim
                \                                                    [space]v',
            \}
        let g:unite_source_menu_menus.vim.command_candidates = [
            \['▷ choose colorscheme',
                \'Unite colorscheme -auto-preview'],
            \['▷ mappings',
                \'Unite mapping -start-insert'],
            \['▷ edit configuration file (vimrc)',
                \'edit $MYVIMRC'],
            \['▷ choose filetype',
                \'Unite -start-insert filetype'],
            \['▷ vim help',
                \'Unite -start-insert help'],
            \['▷ vim commands',
                \'Unite -start-insert command'],
            \['▷ vim functions',
                \'Unite -start-insert function'],
            \['▷ vim runtimepath',
                \'Unite -start-insert runtimepath'],
            \['▷ unite sources',
                \'Unite source'],
            \['▷ kill process',
                \'Unite -default-action=sigkill -start-insert process'],
            \['▷ launch executable (dmenu like)',
                \'Unite -start-insert launcher'],
            \]
        nnoremap <silent>[menu]v :Unite menu:vim -silent -start-insert<CR>
        " }}}
        " }}}

        call unite#filters#matcher_default#use(['matcher_fuzzy'])
        call unite#filters#sorter_default#use(['sorter_rank'])
        call unite#custom#source('file_mru,file_rec,file_rec/async,grep,locate',
                    \ 'ignore_pattern', join(['\.git/', 'tmp/', 'bundle/'], '\|'))

        let g:unite_source_history_yank_enable = 1
        let g:unite_enable_start_insert = 0
        let g:unite_enable_short_source_mes = 0
        let g:unite_force_overwrite_statusline = 0
        let g:unite_prompt = '>>> '
        let g:unite_marked_icon = '✓'
        let g:unite_candidate_icon = ' '
        let g:unite_winheight = 15
        let g:unite_update_time = 200
        let g:unite_split_rule = 'botright'
        let g:unite_data_directory = $HOME.'/.vim/tmp/unite'
        let g:unite_source_buffer_time_format = '(%d-%m-%Y %H:%M:%S) '
        let g:unite_source_file_mru_time_format = '(%d-%m-%Y %H:%M:%S) '
        let g:unite_source_directory_mru_time_format = '(%d-%m-%Y %H:%M:%S) '

        let g:unite_source_grep_command='ack'
        let g:unite_source_grep_default_opts='--no-group --no-color'
        let g:unite_source_grep_recursive_opt=''
        let g:unite_source_grep_search_word_highlight = 1

        let g:junkfile#directory=expand($HOME."/.vim/tmp/junk")
    " }}}
" }}}
